hydra:
  run:
    dir: outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}
  sweep:
    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: RUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=RUN
    task:
    - +experiment=a2pm_mesa_egam_dkm_scannet
    - test_area_acc=False
    - test_pm_acc=False
    - verbose=0
    - name=mesa-f-dkm-sn-eval
    - dataset_name=ScanNet
    - dataset.scene_name=scene0726_00
    - dataset.image_name0=105
    - dataset.image_name1=240
  job:
    name: test_a2pm
    chdir: null
    override_dirname: +experiment=a2pm_mesa_egam_dkm_scannet,dataset.image_name0=105,dataset.image_name1=240,dataset.scene_name=scene0726_00,dataset_name=ScanNet,name=mesa-f-dkm-sn-eval,test_area_acc=False,test_pm_acc=False,verbose=0
    id: ???
    num: ???
    config_name: null
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.3'
    cwd: /opt/data/private/A2PM-git/A2PM-MESA/scripts
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /opt/data/private/A2PM-git/A2PM-MESA/conf
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: /opt/data/private/A2PM-git/A2PM-MESA/scripts/outputs/2024-07-29/22-41-00
    choices:
      experiment: a2pm_mesa_egam_dkm_scannet
      evaler: instance_eval
      geo_area_matcher: egam
      area_matcher: mesa-f
      point_matcher: dkm_indoor
      dataset: scannet_sam
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
